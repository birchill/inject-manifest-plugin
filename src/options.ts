import { validate as validateSchema } from 'schema-utils';
import { PLUGIN_NAME } from './plugin-name.js';
import { ManifestEntry, ManifestTransform } from './transform-manifest.js';

const schema = {
  type: 'object' as const,
  additionalProperties: false,
  properties: {
    additionalManifestEntries: {
      description:
        'A list of entries to be precached, in addition to any entries that are generated as part of the build configuration.',
      type: 'array' as const,
      items: {
        anyOf: [
          {
            $ref: '#/definitions/ManifestEntry',
          },
          {
            type: 'string' as const,
          },
        ],
      },
    },
    chunks: {
      description:
        'One or more chunk names whose corresponding output files should be included in the precache manifest.',
      type: 'array' as const,
      items: {
        type: 'string' as const,
      },
    },
    dontCacheBustURLsMatching: {
      description:
        "Assets that match this will be assumed to be uniquely versioned via their URL, and exempted from the normal HTTP cache-busting that's done when populating the precache. While not required, it's recommended that if your existing build process already inserts a `[hash]` value into each filename, you provide a RegExp that will detect that, as it will reduce the bandwidth consumed when precaching.",
      instanceof: 'RegExp',
    },
    exclude: {
      description:
        "One or more specifiers used to exclude assets from the precache manifest. This is interpreted following [the same rules](https://www.rspack.dev/config/module.html#condition) as `rspack`'s standard `exclude` option. If not provided, the default value is `[/\\.map$/, /^manifest.*\\.js$/]`.",
      type: 'array' as const,
      items: {
        ref: '#/definitions/RuleSetCondition',
      },
    },
    excludeChunks: {
      description:
        'One or more chunk names whose corresponding output files should be excluded from the precache manifest.',
      type: 'array' as const,
      items: {
        type: 'string' as const,
      },
    },
    include: {
      description:
        "One or more specifiers used to include assets in the precache manifest. This is interpreted following [the same rules](https://www.rspack.dev/config/module.html#condition) as `rspack`'s standard `include` option.",
      type: 'array' as const,
      items: {
        ref: '#/definitions/RuleSetCondition',
      },
    },
    injectionPoint: {
      description:
        'The string to find inside of the `swDest` asset. Once found, it will be replaced by the generated precache manifest.',
      default: 'self.__WB_MANIFEST',
      type: 'string' as const,
    },
    manifestTransforms: {
      description:
        'One or more functions which will be applied sequentially against the generated manifest. If `modifyURLPrefix` or `dontCacheBustURLsMatching` are also specified, their corresponding transformations will be applied first.',
      type: 'array' as const,
      items: {
        instanceof: 'Function',
      },
    },
    maximumFileSizeToCacheInBytes: {
      description:
        'This value can be used to determine the maximum size of files that will be precached. This prevents you from inadvertently precaching very large files that might have accidentally matched one of your patterns.',
      default: 2097152,
      type: 'number' as const,
    },
    modifyURLPrefix: {
      description:
        "An object mapping string prefixes to replacement string values. This can be used to, e.g., remove or add a path prefix from a manifest entry if your web hosting setup doesn't match your local filesystem setup. As an alternative with more flexibility, you can use the `manifestTransforms` option and provide a function that modifies the entries in the manifest using whatever logic you provide.",
      type: 'object' as const,
      additionalProperties: {
        type: 'string' as const,
      },
    },
    swDest: {
      description:
        'The name of the service worker file that will be generated, e.g. "serviceworker.js". This file is generated by rspack but needs to be specified in order to inject the manifest into it. Note that this is name of the file generated by rspack, not the original service worker file.',
      type: 'string' as const,
    },
  },
  definitions: {
    ManifestEntry: {
      type: 'object' as const,
      properties: {
        integrity: {
          type: 'string' as const,
        },
        revision: {
          anyOf: [
            {
              type: 'string' as const,
            },
            {
              type: 'null' as const,
            },
          ],
        },
        url: {
          type: 'string' as const,
        },
      },
      additionalProperties: false,
      required: ['revision', 'url'],
    },
    RuleSetCondition: {
      anyOf: [
        {
          type: 'string' as const,
        },
        {
          instanceof: 'RegExp',
        },
        {
          instanceof: 'Function',
        },
      ],
    },
  },
  required: ['swDest'],
};

export type Condition = RegExp | string | ((any: unknown) => boolean);

export type Options = {
  additionalManifestEntries?: Array<string | ManifestEntry>;
  chunks?: Array<string>;
  dontCacheBustURLsMatching?: RegExp;
  exclude?: Array<Condition>;
  excludeChunks?: Array<string>;
  include?: Array<Condition>;
  injectionPoint: string;
  manifestTransforms?: Array<ManifestTransform>;
  maximumFileSizeToCacheInBytes?: number;
  modifyURLPrefix?: Record<string, string>;
  swDest: string;
};

export function validate(options: unknown): Options {
  if (typeof options !== 'object' || options === null) {
    throw new Error(
      `${PLUGIN_NAME}: Expected an options object, but got ${options}.`
    );
  }
  validateSchema(schema, options, {
    name: PLUGIN_NAME,
    baseDataPath: 'options',
  });

  const defaultOptions: Partial<Options> = {
    exclude: [/\.map$/, /^manifest.*\.js$/],
    injectionPoint: 'self.__WB_MANIFEST',
    maximumFileSizeToCacheInBytes: 2097152,
  };

  return { ...defaultOptions, ...(options as Options) };
}
